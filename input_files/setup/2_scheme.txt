// The scheme used for computation.
// First, the temporal method is specified
bool    steady = 0                  // If the computation is steady(1) or unsteady(0)
real    cfl = 0.5                   // The CFL number for time integration 0.1
int     implicit_method = 0         // How to implicitly treat the ODE. 0 - Explicit integration; 1 - DPLUR
int     DPLUR_inner_step = 3        // If we use DPLUR, then we need a specified number of inner iterations.
real convergence_criteria = 1e-7    // The criteria of convergence
// Tag for temporal scheme. Only used when transient simulation is conducted.
// 1-ExplicitEuler; 2-Dual-time iteration with DPLUR; 3-SSPRK
int	 temporal_scheme = 3
bool    fixed_time_step   = 1       // If the time step is fixed(1), then the time step should be given; otherwise(0), the time step is determined by CFL number.
real dt = 1e-5                      // In unsteady simulation, the time step should be given
real total_simulation_time = 0.3    // In unsteady simulation, how long physical time to be simulated
int     inner_iteration = 20
// Next, the inviscid discretization is declared.
// Tag for inviscid schemes. 2-Roe; 3-AUSM+;
// Tags that are larger than 10 will use conservative variables to reconstruct. 51-WENO5(component); 52-WENO5(characteristic); 71-WENO7(component); 72-WENO7(characteristic)
int  inviscid_scheme = 3
// Tag for reconstruction method. 1-1st_order, 2-MUSCL, 3-NND2
int  reconstruction = 2
// Tag for limiters. 0-minmod
int  limiter = 0
real entropy_fix_factor = 0.125     // If the Roe scheme is used, the entropy fix factor should be given
// Next, the viscous discretization order is declared.
int viscous_order = 0               // Default: 2nd order central discretization. Other choices: 0(inviscid)
